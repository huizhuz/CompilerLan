{"version":3,"sources":["App.module.css","Header/Header.module.css","TextEditor/TextEditor.module.css","Console/Console.module.css","assets/logo.png","Footer/Footer.module.css","Resource/Resource.module.css","Header/Header.js","Footer/Footer.js","Resource/Resource.js","TextEditor/TextEditor.js","Console/Console.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","Styles","TitleWrapper","src","logo","alt","github","icon","faCodeBranch","Footer","styles","target","href","Resource","download","TextEditor","props","TextEditorWrapper","CompileButton","Console","ConsoleWrapper","App","state","input","output","Compiler","code","this","log","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gGACAA,EAAOC,QAAU,CAAC,IAAM,iBAAiB,SAAW,wB,gBCApDD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,aAAe,+B,iBCAjED,EAAOC,QAAU,CAAC,kBAAoB,sCAAsC,cAAgB,oC,gBCA5FD,EAAOC,QAAU,CAAC,eAAiB,gCAAgC,QAAU,2B,qBCD7ED,EAAOC,QAAU,IAA0B,kC,gBCC3CD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,wB,kBCA1DD,EAAOC,QAAU,CAAC,SAAW,6B,uOCcdC,EAXA,WACX,OACI,yBAAKC,UAAWC,IAAOF,QACnB,yBAAKC,UAAWC,IAAOC,cACnB,yBAAKC,IAAKC,IAAMC,IAAI,aACpB,+C,iCCJVC,EAAS,kBAAC,IAAD,CAAiBC,KAAMC,MAevBC,EAbA,WACX,OACI,yBAAKT,UAAWU,IAAOD,QACnB,6BACI,mDACA,uBAAGE,OAAO,SAASC,KAAK,0CAAyC,kDAAwBN,EAAxB,WACjE,kE,iBCFDO,EARE,WACb,OACI,uBAAGD,KAAK,gCAAgCE,UAAQ,EAACd,UAAWC,IAAOY,UAAnE,gC,gBCQOE,EAVI,SAACC,GAChB,OACI,yBAAKhB,UAAWC,IAAOgB,mBACnB,qDACA,mCACA,yBAAKjB,UAAWC,IAAOiB,eAAvB,a,gBCKGC,EAVC,SAACH,GACb,OACI,yBAAKhB,UAAWC,IAAOmB,gBACnB,sCACA,yBAAKpB,UAAWC,IAAOkB,YCyBpBE,E,2MAvBbC,MAAQ,CACNC,MAAO,OACPC,OAAQ,Q,wEAGR,OACE,yBAAKxB,UAAWC,IAAOoB,KACrB,uIAGA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,yBAAKrB,UAAWC,IAAOwB,UACrB,kBAAC,EAAD,CAAYC,KAAMC,KAAKL,MAAMC,MAAOK,IAAKD,KAAKL,MAAME,SACpD,kBAAC,EAAD,CAASI,IAAKD,KAAKL,MAAME,UAE3B,kBAAC,EAAD,W,GAjBUK,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.eddd62c9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__16ZpL\",\"Compiler\":\"App_Compiler__1pCBe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header\":\"Header_Header__3Ipkk\",\"TitleWrapper\":\"Header_TitleWrapper__3nUjL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TextEditorWrapper\":\"TextEditor_TextEditorWrapper__3G8Dj\",\"CompileButton\":\"TextEditor_CompileButton__1TZ6G\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ConsoleWrapper\":\"Console_ConsoleWrapper__ELkoB\",\"Console\":\"Console_Console__2QXGN\"};","module.exports = __webpack_public_path__ + \"static/media/logo.62d39104.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Footer\":\"Footer_Footer__2rFBp\",\"blink\":\"Footer_blink__syxYh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Resource\":\"Resource_Resource__1ljQD\"};","import React from 'react';\nimport Styles from './Header.module.css'\nimport logo from '../assets/logo.png'\n\nconst Header = () => {\n    return (\n        <div className={Styles.Header}>\n            <div className={Styles.TitleWrapper}>\n                <img src={logo} alt=\"LAN Logo\"></img>\n                <h1>LAN Compiler</h1>\n            </div>\n        </div>\n    );\n}\n\nexport default Header;\n","import React from 'react';\nimport styles from './Footer.module.css'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCodeBranch } from '@fortawesome/free-solid-svg-icons'\n\nconst github = <FontAwesomeIcon icon={faCodeBranch} />\n\nconst Footer = () => {\n    return (\n        <div className={styles.Footer}>\n            <div>\n                <p>Created with ReactJS</p>\n                <a target=\"_blank\" href=\"https://github.com/huizhuz/CompilerLan\"><p>See the code on my  {github}  page</p></a>\n                <p>&copy; Huizhu Zhang - January 2020</p>\n            </div>\n\n        </div>\n    );\n}\n\nexport default Footer;\n","import React from 'react';\nimport Styles from './Resource.module.css'\n\nconst Resource = () => {\n    return (\n        <a href=\"../assets/LAN_Description.pdf\" download className={Styles.Resource}>\n            See the syntax LAN supports\n        </a>\n    );\n}\n\nexport default Resource;\n","import React from 'react';\nimport Styles from './TextEditor.module.css'\n\nconst TextEditor = (props) => {\n    return (\n        <div className={Styles.TextEditorWrapper}>\n            <p>Write your code here: </p>\n            <textarea />\n            <div className={Styles.CompileButton}>Compile</div>\n        </div>\n    )\n}\n\nexport default TextEditor","import React from 'react';\nimport Styles from './Console.module.css'\n\nconst Console = (props) => {\n    return (\n        <div className={Styles.ConsoleWrapper}>\n            <p>Console</p>\n            <div className={Styles.Console}></div>\n            {/* <div className={Styles.ClearButton}>Clear</div> */}\n        </div>\n    );\n}\n\nexport default Console;\n","import React, { Component } from 'react';\nimport Styles from './App.module.css';\nimport Header from './Header/Header';\nimport Footer from './Footer/Footer';\nimport Resource from './Resource/Resource'\nimport TextEditor from './TextEditor/TextEditor';\nimport Console from './Console/Console'\n\nclass App extends Component {\n  state = {\n    input: 'hihi',\n    output: 'hoho'\n  }\n  render() {\n    return (\n      <div className={Styles.App} >\n        <style>\n          @import url('https://fonts.googleapis.com/css?family=Comfortaa:700|Quicksand:300,400&display=swap');\n    </style>\n        <Header></Header>\n        <Resource></Resource>\n        <div className={Styles.Compiler}>\n          <TextEditor code={this.state.input} log={this.state.output}></TextEditor>\n          <Console log={this.state.output}></Console>\n        </div>\n        <Footer></Footer>\n      </div>\n    )\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}