{"version":3,"sources":["Console/Console.module.css","App.module.css","Header/Header.module.css","TextEditor/TextEditor.module.css","assets/logo.png","Footer/Footer.module.css","Resource/Resource.module.css","files/Lan_Compiler_HuizhuZhang.pdf","redux/reducers.js","redux/store.js","Header/Header.js","Footer/Footer.js","Resource/Resource.js","redux/stateProvider.js","redux/actions.js","TextEditor/TextEditor.js","Console/Console.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","reducers","state","action","type","newState","errorMessages","push","errorMessage","hasError","stateToBeUpdated","output","store","createStore","Header","className","Styles","TitleWrapper","src","logo","alt","github","icon","faCodeBranch","Footer","styles","target","href","Resource","pdf","download","mapStateToProps","mapDispatchProps","dispatch","addErrorMessage","addOutput","clearAll","withState","WrappedComponent","connect","letters","operators","compile","str","props","tokens","lexer","parsedAST","parser","execute","isValidIdentifier","match","length","replace","split","filter","token","map","isNaN","value","AST","body","declaredIdentifiers","isIdentifierDeclared","identifier","find","id","name","getIdentifiersValue","index","findIndex","current_token","shift","declaration","parseInt","expression","operator","expressions","includes","right_hand","forEach","el","leftHand","rightHand","TextEditorWrapper","this","code","onChange","e","writeCode","CompileButton","onClick","Component","error","Console","log","ConsoleWrapper","App","input","setState","Compiler","Boolean","window","location","hostname","rootElement","document","getElementById","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8ac971a9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ConsoleWrapper\":\"Console_ConsoleWrapper__ELkoB\",\"Console\":\"Console_Console__2QXGN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__16ZpL\",\"Compiler\":\"App_Compiler__1pCBe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header\":\"Header_Header__3Ipkk\",\"TitleWrapper\":\"Header_TitleWrapper__3nUjL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TextEditorWrapper\":\"TextEditor_TextEditorWrapper__3G8Dj\",\"CompileButton\":\"TextEditor_CompileButton__1TZ6G\"};","module.exports = __webpack_public_path__ + \"static/media/logo.62d39104.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Footer\":\"Footer_Footer__2rFBp\",\"blink\":\"Footer_blink__syxYh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Resource\":\"Resource_Resource__1ljQD\"};","module.exports = __webpack_public_path__ + \"static/media/Lan_Compiler_HuizhuZhang.081c216d.pdf\";","export const INITIAL_STATE = {\n    errorMessages: [],\n    output: [],\n    hasError: null\n};\n\n\nconst reducers = (state, action) => {\n    switch (action.type) {\n        case 'ADD_ERROR_MESSAGE':\n            const newState = {...state};\n            newState.errorMessages.push(action.errorMessage);\n            newState.hasError = true;\n            return newState;\n        case 'ADD_OUTPUT':\n            const stateToBeUpdated = {...state};\n            stateToBeUpdated.output.push(action.output);\n            stateToBeUpdated.hasError = false;\n            return stateToBeUpdated;\n        case 'CLEAR_ALL':\n            return {\n                errorMessages: [],\n                output: [],\n                hasError: null\n            }\n        default:\n            return state\n    }\n}\n\nexport default reducers;","import { createStore } from 'redux';\nimport reducers, {INITIAL_STATE} from './reducers';\n\nconst store = createStore(reducers, INITIAL_STATE)\nexport default store;","import React from 'react';\nimport Styles from './Header.module.css'\nimport logo from '../assets/logo.png'\n\nconst Header = () => {\n    return (\n        <div className={Styles.Header}>\n            <div className={Styles.TitleWrapper}>\n                <img src={logo} alt=\"LAN Logo\"></img>\n                <h1>LAN Compiler</h1>\n            </div>\n        </div>\n    );\n}\n\nexport default Header;\n","import React from 'react';\nimport styles from './Footer.module.css'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCodeBranch } from '@fortawesome/free-solid-svg-icons'\n\nconst github = <FontAwesomeIcon icon={faCodeBranch} />\n\nconst Footer = () => {\n    return (\n        <div className={styles.Footer}>\n            <div>\n                <p>Created with ReactJS</p>\n                <a target=\"_blank\" href=\"https://github.com/huizhuz/CompilerLan\"><p>See the code on my  {github}  page</p></a>\n                <p>&copy; Huizhu Zhang - January 2020</p>\n            </div>\n\n        </div>\n    );\n}\n\nexport default Footer;\n","import React from 'react';\nimport Styles from './Resource.module.css';\nimport pdf from '../files/Lan_Compiler_HuizhuZhang.pdf';\n\nconst Resource = () => {\n    return (\n        <a href={pdf} download className={Styles.Resource}>\n            See the syntax LAN supports\n        </a>\n    );\n}\n\nexport default Resource;\n","import { connect } from 'react-redux';\nimport { ADD_ERROR_MESSAGE, ADD_OUTPUT, CLEAR_ALL } from './actions';\n\nfunction mapStateToProps(state) {\n    return {\n        errorMessages: state.errorMessages,\n        output: state.output,\n        hasError: state.hasError\n    };\n}\n\nfunction mapDispatchProps(dispatch) {\n    return {\n        addErrorMessage: (errorMessage) => {\n            dispatch({ type: ADD_ERROR_MESSAGE, errorMessage });\n        },\n        addOutput: (output) => {\n            dispatch({ type: ADD_OUTPUT, output });\n        },\n        clearAll: () => {\n            dispatch({type: CLEAR_ALL})\n        }\n    };\n}\n\nexport default function withState(WrappedComponent) {\n    return connect(mapStateToProps, mapDispatchProps)(WrappedComponent);\n}","// action types\nexport const ADD_ERROR_MESSAGE = 'ADD_ERROR_MESSAGE';\nexport const ADD_OUTPUT = 'ADD_OUTPUT';\nexport const CLEAR_ALL = 'CLEAR_ALL';\n\n\n// actions\nexport function addErrorMessages(errorMessage) {\n    return {\n        type: ADD_ERROR_MESSAGE,\n        errorMessage\n    }\n}\n\nexport function addOutput(output) {\n    return {\n        type: ADD_OUTPUT,\n        output\n    }\n}\n\nexport function clearAll() {\n    return {\n        type: CLEAR_ALL\n    }\n}\n","import React, { Component } from 'react';\nimport Styles from './TextEditor.module.css'\nimport withState from '../redux/stateProvider';\n\nconst letters = /^[A-Za-z]+$/;\nconst operators = ['+', '-', '*', '/', '%'];\nconst assOperators = ['=', '+=', '-=', '*=', '/=', '%='];\n\nclass TextEditor extends Component {\n    compile = (str) => {\n        this.props.clearAll();\n        const tokens = this.lexer(str);\n        const parsedAST = this.parser(tokens);\n        this.execute(parsedAST);\n    };\n\n    isValidIdentifier = (str) => {\n        return str ?? str.match(letters) ?? str.match(letters).length === str.length;\n    }\n    // The lexer turns the input string into an array of tokens. \n    lexer = (str) => {\n        return str.replace(/[;\\n\\r]/g, ' ').split(' ').filter(token => token.length).map((token) => {\n            return isNaN(token) ? { type: 'word', value: token } : { type: 'number', value: token }\n        })\n    };\n    // The parser turns the list of tokens into an Abstract Syntax Tree. \n    parser = (tokens) => {\n        let AST = {\n            type: 'cal',\n            body: []\n        };\n        let declaredIdentifiers = [];\n        const isIdentifierDeclared = (identifier) => {\n            return !!declaredIdentifiers.find(id => id.name === identifier);\n        }\n\n        const getIdentifiersValue = (identifier) => {\n            let index = declaredIdentifiers.findIndex(id => id.name === identifier)\n            return declaredIdentifiers[index]?.value;\n        }\n        // parse a token at a time as current_token. Loop until we are out of tokens.\n        while (tokens.length > 0) {\n            var current_token = tokens.shift();\n\n            if (current_token.value === 'int') {\n                let declaration = {\n                    type: 'declaration',\n                    identifier: {\n                        name: '',\n                        value: null\n                    },\n                }\n                let identifier = tokens.shift().value;\n                if (this.isValidIdentifier(identifier) && !isIdentifierDeclared(identifier)) {\n                    declaration.identifier.name = identifier;\n                    // Identifier needs to be followed by an assignment operator\n                    if (tokens[0] && tokens[0].value === '=') {\n                        tokens.shift();\n                        if (tokens[0] && !isNaN(tokens[0].value)) {\n                            declaration.identifier.value = parseInt(tokens.shift().value);\n                            declaredIdentifiers.push({\n                                name: declaration.identifier.name,\n                                value: declaration.identifier.value\n                            })\n                            AST.body.push(declaration);\n                        } else {\n                            this.props.addErrorMessage('Value should be assigned to identifier!');\n                        }\n                    } else {\n                        this.props.addErrorMessage('Identifier is undefined!');\n                    }\n                } else {\n                    this.props.addErrorMessage('Identifier is not valid!');\n                }\n            } else { // NOT 'int': not a declaration, so it must be an expression\n                if (!isNaN(current_token.value) || isIdentifierDeclared(current_token.value)) {\n                    let expression = {\n                        type: 'expression',\n                        operator: null,\n                        expressions: []\n                    };\n                    if (!isNaN(current_token.value)) {\n                        expression.expressions.push(parseInt(current_token.value))\n                    } else {\n                        expression.expressions.push(getIdentifiersValue(current_token.value))\n                    }\n\n                    let operator = tokens.shift()?.value;\n                    if (operators.includes(operator)) {\n                        expression.operator = operator;\n                        let right_hand = tokens.shift().value;\n                        if (!isNaN(right_hand) || isIdentifierDeclared(right_hand)) {\n                            if (!isNaN(right_hand)) {\n                                expression.expressions.push(parseInt(right_hand));\n                                AST.body.push(expression);\n                            } else {\n                                expression.expressions.push(getIdentifiersValue(right_hand));\n                                AST.body.push(expression);\n                            }\n                        } else {\n                            this.props.addErrorMessage('Right-hand side of the binary operator is invalid');\n                        }\n                    } else {\n                        this.props.addErrorMessage('Expecting a binary operator!');\n                    }\n                } else if (operators.includes(current_token.value)) {\n                    this.props.addErrorMessage('All operators should be binary!');\n                } else {\n                    this.props.addErrorMessage('Invalid expression!');\n                }\n            }\n        }\n        return AST;\n    }\n\n    execute = (AST) => {\n        AST.body.forEach(el => {\n            if (el.type === 'expression') {\n                let leftHand = el.expressions[0];\n                let rightHand = el.expressions[1];\n                let operator = el.operator;\n                if ((operator === '/' || '%') && rightHand == 0) {\n                    this.props.addErrorMessage('Algebra 101, nothing can be divided by zero.');\n                } else {\n                    switch (operator) {\n                        case '+':\n                            this.props.addOutput(parseInt(leftHand + rightHand));\n                            break;\n                        case '-':\n                            this.props.addOutput(parseInt(leftHand - rightHand));\n                            break;\n                        case '*':\n                            this.props.addOutput(parseInt(leftHand * rightHand));\n                            break;\n                        case '/':\n                            this.props.addOutput(parseInt(leftHand / rightHand));\n                            break;\n                        case '%':\n                            this.props.addOutput(parseInt(leftHand % rightHand));\n                            break;\n                    }\n                }\n            }\n        });\n    }\n\n    render() {\n        return (\n            <div className={Styles.TextEditorWrapper}>\n                <p>Write your code here: </p>\n                <textarea value={this.props.code} onChange={(e) => this.props.writeCode(e)} />\n                <div className={Styles.CompileButton}\n                    onClick={() => this.compile(this.props.code)}>Compile</div>\n            </div>\n        )\n    }\n}\nexport default withState(TextEditor)","import React, { Component } from 'react';\nimport Styles from './Console.module.css'\nimport withState from '../redux/stateProvider'\n\nclass Console extends Component {\n    render() {\n        let output = this.props.hasError ? this.props.errorMessages.map(error => (\n            <div className={Styles.Console}>{error}</div>\n        )) : this.props.output.map(log => (\n            <div className={Styles.Console}>{log}</div >\n        ))\n\n        return (\n            <div className={Styles.ConsoleWrapper}>\n                <p>Console</p>\n                {output}\n            </div>\n        );\n    }\n}\n\nexport default withState(Console);\n","import React, { Component } from 'react';\nimport Styles from './App.module.css';\nimport Header from './Header/Header';\nimport Footer from './Footer/Footer';\nimport Resource from './Resource/Resource'\nimport TextEditor from './TextEditor/TextEditor';\nimport Console from './Console/Console';\n\nclass App extends Component {\n  state = {\n    input: '',\n  }\n\n  writeCode = (e) => {\n    this.setState({input: e.target.value});\n  }\n\n  \n  render() {\n    return (\n      <div className={Styles.App} >\n        <style>\n          @import url('https://fonts.googleapis.com/css?family=Comfortaa:700|Quicksand:300,400&display=swap');\n        </style>\n        <Header></Header>\n        <Resource></Resource>\n        <div className={Styles.Compiler}>\n          <TextEditor code={this.state.input}  \n                      writeCode={this.writeCode}\n                      ></TextEditor>\n          <Console></Console>\n        </div>\n        <Footer></Footer>\n      </div>\n    )\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from '../src/redux/store';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nconst rootElement = document.getElementById('root');\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  rootElement\n)\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}